// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum NotificationType {
  APPOINTMENT_CREATED
  APPOINTMENT_UPDATED
  APPOINTMENT_CANCELLED
  APPOINTMENT_REMINDER
  SYSTEM_NOTIFICATION
}

model User {
  id String @id @default(cuid())
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  password String?
  role UserRole @default(USER)
  accounts Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  appointments Appointment[]
  workingHours WorkingHours[]
  staff Staff[]
  services Service[]
  notifications Notification[]
  notificationSettings NotificationSettings?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId])
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int      // Duration in minutes
  price       Float
  color       String?  // Renk kodu (örn: #FF5733)
  isActive    Boolean  @default(true)
  category    String?  // Hizmet kategorisi
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointmentServices AppointmentService[]
}

model Appointment {
  id            String   @id @default(cuid())
  customerName  String
  customerPhone String
  startTime     DateTime
  endTime       DateTime
  notes         String?
  status        AppointmentStatus @default(PENDING)
  isManual      Boolean  @default(false)  // Manuel oluşturulan randevuları işaretlemek için
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  appointmentServices AppointmentService[]
}

model AppointmentService {
  id            String   @id @default(cuid())
  appointmentId String
  serviceId     String
  createdAt     DateTime @default(now())
  actualDuration Int?    // Gerçek süre (dakika olarak) - null ise servisin varsayılan süresi kullanılır
  order         Int      @default(0)  // Hizmetlerin sırası
  isResizable   Boolean  @default(false)  // Resize edilebilir mi?

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  service       Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([appointmentId, serviceId])
}

model WorkingHours {
  id          String   @id @default(cuid())
  day         String
  isOpen      Boolean  @default(true)
  startTime   String
  endTime     String
  breakStart  String
  breakEnd    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Staff {
  id          String   @id @default(cuid())
  name        String
  email       String?  @unique
  phone       String?
  title       String
  specialties String[]
  isActive    Boolean  @default(true)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  title       String
  message     String
  type        NotificationType
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationSettings {
  id                    String   @id @default(cuid())
  emailNotifications    Boolean  @default(true)
  smsNotifications      Boolean  @default(true)
  appointmentReminders  Boolean  @default(true)
  marketingEmails       Boolean  @default(false)
  systemNotifications   Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}